// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  IMAGE
  VIDEO
  FILE
}

enum ApprovalStatus {
  PENDING
  DATA_MISSING
  APPROVED
  REJECTED
}

model Media {
  key           String       @unique
  url           String
  type          MediaType
  userId        String?
  causeId       String?
  cause         Cause?       @relation(fields: [causeId], references: [id], onDelete: Cascade)
  approvalId    String?
  approval      Approval?    @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  certificateId String?
  certificate   Certificate?
  articleId     String?      @unique
  article       Article?     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([type, createdAt])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  causes    Cause[]
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([createdAt])
}

model Message {
  id           String      @id @default(cuid())
  content      String
  fromUserId   String
  toUserId     String
  discussionId String?
  discussion   Discussion? @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([createdAt])
}

model Discussion {
  id         String    @id @default(cuid())
  title      String
  messages   Message[]
  approvalId String?
  approval   Approval? @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([createdAt])
}

model Approval {
  id          String         @id @default(cuid())
  approverId  String
  requesterId String
  causeId     String?        @unique
  cause       Cause?         @relation(fields: [causeId], references: [id], onDelete: Cascade)
  volunteerId String?        @unique
  volunteer   Volunteer?     @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  status      ApprovalStatus
  media       Media[]
  discussions Discussion[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([createdAt])
}

model Like {
  userId    String
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
  @@index([createdAt])
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  userId      String
  causeId     String?
  cause       Cause?    @relation(fields: [causeId], references: [id], onDelete: Cascade)
  likes       Like[]
  referenceId String?
  reference   Comment?  @relation("ReplyToReply", fields: [referenceId], references: [id], onDelete: Cascade)
  references  Comment[] @relation("ReplyToReply")
  parentId    String?
  parent      Comment?  @relation("ReplyToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("ReplyToComment")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdAt])
}

model Cause {
  id           String     @id @default(cuid())
  title        String
  description  String
  targetAmount Float
  media        Media[]
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isForwarded  Boolean?   @default(false)
  isPublished  Boolean?   @default(false)
  approval     Approval?
  comments     Comment[]
  articles     Article[]
  donations    Donation[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookmarks    Bookmark[]

  @@index([createdAt, isForwarded, isPublished])
}

model Bookmark {
  causeId   String   @unique
  cause     Cause    @relation(fields: [causeId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id           String    @id @default(cuid())
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  title        String
  content      String
  authorId     String
  coverImageId String?
  coverImage   Media?
  causes       Cause[]
  isPublished  Boolean?  @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([createdAt, isPublished])
}

model Certificate {
  id          String     @id @default(cuid())
  documentKey String     @unique
  document    Media      @relation(fields: [documentKey], references: [key])
  volunteerId String?
  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([createdAt])
}

model Volunteer {
  id          String        @id @default(cuid())
  approvalId  String?
  approval    Approval?
  startDate   DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  certificate Certificate[]

  @@index([createdAt])
}

model Transaction {
  id         String    @unique
  donationId String?   @unique
  donation   Donation? @relation(fields: [donationId], references: [id])
  isSuccess  Boolean?  @default(false)

  @@index(id)
}

model Donation {
  id            String       @id @default(cuid())
  amount        Float
  causeId       String?
  cause         Cause?       @relation(fields: [causeId], references: [id])
  userId        String
  transactionId String?
  transaction   Transaction?
  isAnonymous   Boolean?     @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([createdAt, amount])
}
